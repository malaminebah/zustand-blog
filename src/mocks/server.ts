import { ApolloServer } from '@apollo/server';
import { startStandaloneServer } from '@apollo/server/standalone';

interface Article {
  id: string;
  title: string;
  content: string;
  createdAt: string;
  tags: string[];
}

const typeDefs = `#graphql
  type Article {
    id: ID!
    title: String!
    content: String!
    createdAt: String!
    tags: [String!]!
  }

  type Query {
    articles: [Article!]!
    article(id: ID!): Article
    articlesByTag(tag: String!): [Article!]!
  }

  type Mutation {
    createArticle(title: String!, content: String!, tags:[String!]!): Article!
    deleteArticle(id: ID!): Boolean!
    updateArticleTags(id:ID!, tags:[String!]!):Article!
  }
`;

const articles = [
  {
    id: "1",
    title: "Introduction Ã  Zustand : Un gestionnaire d'Ã©tat minimaliste pour React",
    content: `Zustand est une solution de gestion d'Ã©tat lÃ©gÃ¨re et performante pour React qui rÃ©volutionne la faÃ§on dont nous gÃ©rons l'Ã©tat dans nos applications. Contrairement Ã  Redux, qui nÃ©cessite beaucoup de code boilerplate, Zustand adopte une approche minimaliste et intuitive.

Les principaux avantages de Zustand incluent :
â€¢ Une API simple et directe qui rÃ©duit la complexitÃ©
â€¢ Pas besoin de Provider comme avec Redux ou Context
â€¢ Support natif de TypeScript avec une excellente infÃ©rence de types
â€¢ Performances optimisÃ©es avec des mises Ã  jour sÃ©lectives
â€¢ Bundle size minimal qui n'alourdit pas votre application

Voici un exemple concret d'utilisation de Zustand :

const useStore = create((set) => ({
  bears: 0,
  increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),
  removeAllBears: () => set({ bears: 0 })
}));

Cette simplicitÃ© ne sacrifie pas la puissance - Zustand supporte les actions asynchrones, le middleware, et peut mÃªme Ãªtre utilisÃ© avec les outils de dÃ©veloppement Redux.`,
    createdAt: "2024-01-15T10:00:00.000Z",
    tags: ["React", "State Management", "Zustand"]
  },
  {
    id: "2",
    title: "GraphQL vs REST : Pourquoi choisir GraphQL pour votre API ?",
    content: `GraphQL reprÃ©sente une Ã©volution majeure dans la conception d'APIs, offrant une alternative flexible et puissante aux APIs REST traditionnelles. Cette technologie, dÃ©veloppÃ©e par Facebook, rÃ©sout de nombreux problÃ¨mes courants rencontrÃ©s avec REST.

Avantages principaux de GraphQL :
1. RequÃªtes prÃ©cises : Les clients spÃ©cifient exactement les donnÃ©es dont ils ont besoin
2. Un seul endpoint : Fini les multiples endpoints REST
3. Typage fort : Un systÃ¨me de types qui sÃ©curise vos APIs
4. Documentation auto-gÃ©nÃ©rÃ©e : Plus besoin de maintenir une documentation sÃ©parÃ©e
5. RÃ©solution des problÃ¨mes de sur-fetching et sous-fetching

Exemple de requÃªte GraphQL :
query {
  user(id: "123") {
    name
    email
    posts {
      title
      comments {
        content
        author {
          name
        }
      }
    }
  }
}

Cette flexibilitÃ© permet aux clients mobiles de demander moins de donnÃ©es que les clients web, optimisant ainsi la bande passante et les performances. GraphQL brille particuliÃ¨rement dans les applications modernes avec des besoins en donnÃ©es complexes et variables.`,
    createdAt: "2024-01-16T14:30:00.000Z",
    tags: ["GraphQL", "API", "REST"]
  },
  {
    id: "3",
    title: "React 18 : Les nouvelles fonctionnalitÃ©s Ã  connaÃ®tre",
    content: `React 18 introduit des changements fondamentaux qui amÃ©liorent significativement les performances et l'expÃ©rience utilisateur des applications React. Cette mise Ã  jour majeure apporte le concurrent rendering et de nombreuses fonctionnalitÃ©s attendues par la communautÃ©.

Principales nouveautÃ©s :
1. Concurrent Rendering
- Permet des mises Ã  jour interruptibles de l'interface utilisateur
- AmÃ©liore la rÃ©activitÃ© de l'application
- Introduit de nouveaux hooks comme useTransition

2. Automatic Batching
- Regroupe automatiquement les mises Ã  jour d'Ã©tat
- RÃ©duit le nombre de re-renders
- AmÃ©liore les performances globales

3. Suspense sur le serveur
- Support du rendu cÃ´tÃ© serveur avec streaming
- Hydratation sÃ©lective des composants
- Meilleure expÃ©rience utilisateur pendant le chargement

4. Nouveaux hooks
useId() : GÃ©nÃ©ration d'IDs uniques
useTransition() : Gestion des mises Ã  jour non urgentes
useDeferredValue() : Report des mises Ã  jour coÃ»teuses

Exemple d'utilisation de useTransition :
const [isPending, startTransition] = useTransition();
startTransition(() => {
  setCount(count + 1);
});

Ces amÃ©liorations permettent de crÃ©er des applications plus rapides et plus rÃ©actives, avec une meilleure gestion des mises Ã  jour concurrentes et des Ã©tats de chargement.`,
    createdAt: "2024-01-17T09:15:00.000Z",
    tags: ["React", "Performance", "React 18"]
  }
];

const resolvers = {
  Query: {
    articles: () => articles,
    article: (_: any, { id }: { id: string }) => 
      articles.find(article => article.id === id),
    articlesByTag:(_:any,{tag}:{tag:string})=>articles.filter(article=>article.tags.includes(tag))
  },
  Mutation: {
    createArticle: (_: any, { title, content, tags }: { title: string; content: string , tags:string[] }) => {
      const newArticle = {
        id: String(articles.length + 1),
        title,
        content,
        createdAt: new Date().toISOString(),
        tags:tags || []
      };
      articles.push(newArticle);
      return newArticle;
    },
    updateArticleTags: (_: any, { id, tags }: { id: string; tags: string[] }) => {
        const article = articles.find(a => a.id === id);
        if (!article) throw new Error('Article non trouvÃ©');
        
        article.tags = tags;
        return article;
      },
      
    deleteArticle: (_: any, { id }: { id: string }) => {
      const index = articles.findIndex(article => article.id === id);
      if (index === -1) return false;
      articles.splice(index, 1);
      return true;
    },
  },
};

const server = new ApolloServer({
  typeDefs,
  resolvers,
});

const { url } = await startStandaloneServer(server, {
  listen: { port: 4000 },
});

console.log(`ğŸš€ Server ready at ${url}`); 